1 C1 显式实现 I1.Count
1.1 用 object 和用 C1 返回 包装类型应该都是 C1
1.2 1.1 返回的对象无法调用 Count
1.3 用 I1 返回 包装类型为 I1
1.4 1.3 返回的对象可以调用 Count
1.5 1.3 返回的对象可以调用 C1 定义的其他 public 方法


2. C2 隐式实现 I2.Count 显式实现 I1.Count
2.1 C2 的包装对象 可以调用 Count 为 I2.Count
2.2 用 I1 返回 包装类型为 I1
2.3 2.2 返回的对象可以调用 Count 为 I1.Count
2.2 用 I2 返回 包装类型为 I2
2.3 2.2 返回的对象可以调用 Count 为 I2.Count


3. C3 隐式实现 I4  I4继承I3
3.1 C3 包装对象可以调用 I3 方法
3.2 C3 包装对象可以调用 I4 方法
3.3 I4 包装对象可以调用 I3 方法
3.4 I3 包装对象不能调用 I4 方法


4. C4 隐式实现 I6  I6继承I5(两个方法) 并复写了 I5 的一个方法
4.1 I6 包装对象可以调用 I5 的两个方法 I6自身方法
4.2 I5 包装对象可以调用 I5 的两个方法
4.2 I5 包装对象不能调用 I6 自身方法


5. C5 显示实现 I6  I6继承I5(两个方法) 并复写了 I5 的一个方法
	C5 显示实现 I5 的两个方法
5.1 3个包装对象 类型 值 检查
5.2 C5包装对象 调用 I5 的两个方法应该失败?
5.3 C5包装对象 调用 I6 自身方法应该成功
5.4 C5包装对象 调用 I5 复写的 I5 的方法 定义时候应该写两个？ 成功？ 调哪个？
5.5 I6包装对象 调 3个方法
5.6 I5包装对象 调 3个方法


6. C7 继承 C8(两个方法 一个 virtual MV1 一个不是 M2) C8 实现 I8 包括 MV1 M2
	C7 override MV1 一个 new M2
6.1 C7包装对象 调用MV1
6.2 C7包装对象 调用M2
6.3 C8包装对象 调用MV1
6.4 C8包装对象 调用M2
6.5 I8包装对象 调用MV1
6.6 I8包装对象 调用M2

7. C9 new object 的方法 ToString
	C# 方法返回类型 object 的 C9 实例
public class X
{
	private static readonly X instance = new X();
	public static X Instance {get {return instance;}}
	public static object Object {get {return instance;}}
	public new string ToString()
	{
		return "X.new.ToString";
	}
}
7.1 object 的 c9 调用方法 X
7.2 C9 的 c9 调用方法 X

